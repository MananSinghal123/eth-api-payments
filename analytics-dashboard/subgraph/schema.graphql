type User @entity {
  id: Bytes! # wallet address
  totalDeposited: BigInt!
  totalWithdrawn: BigInt!
  currentBalance: BigInt!
  totalSpent: BigInt! # total payments made to providers
  depositCount: Int!
  withdrawalCount: Int!
  paymentCount: Int!
  firstDepositTimestamp: BigInt!
  lastActivityTimestamp: BigInt!
  
  # Relationships
  deposits: [UserDeposit!]! @derivedFrom(field: "user")
  withdrawals: [UserWithdraw!]! @derivedFrom(field: "user")
  paymentsFrom: [BatchPayment!]! @derivedFrom(field: "user")
}

type Provider @entity {
  id: Bytes! # wallet address
  totalEarned: BigInt!
  totalWithdrawn: BigInt!
  currentBalance: BigInt!
  paymentCount: Int!
  uniqueUsers: Int! # count of unique users who have paid this provider
  firstPaymentTimestamp: BigInt!
  lastActivityTimestamp: BigInt!
  
  # Relationships
  withdrawals: [ProviderWithdraw!]! @derivedFrom(field: "provider")
  paymentsTo: [BatchPayment!]! @derivedFrom(field: "provider")
}

type UserDeposit @entity {
  id: Bytes! # transaction hash + log index
  user: User!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type UserWithdraw @entity {
  id: Bytes! # transaction hash + log index
  user: User!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ProviderWithdraw @entity {
  id: Bytes! # transaction hash + log index
  provider: Provider!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type BatchPayment @entity {
  id: Bytes! # transaction hash + log index
  user: User!
  provider: Provider!
  amount: BigInt!
  numCalls: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  costPerCall: BigDecimal! # calculated field: amount / numCalls
}

type PaymentFlow @entity {
  id: Bytes! # user-provider combination
  user: User!
  provider: Provider!
  totalAmount: BigInt!
  totalCalls: BigInt!
  paymentCount: Int!
  firstPaymentTimestamp: BigInt!
  lastPaymentTimestamp: BigInt!
  averageCostPerCall: BigDecimal!
}

type DailyMetrics @entity {
  id: Bytes! # date as YYYY-MM-DD
  date: String!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalPayments: BigInt!
  uniqueUsers: Int!
  uniqueProviders: Int!
  newUsers: Int!
  newProviders: Int!
  totalApiCalls: BigInt!
  averagePaymentAmount: BigDecimal!
  timestamp: BigInt!
}

type GlobalMetrics @entity {
  id: Bytes! # always "global"
  totalUsers: Int!
  totalProviders: Int!
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalPayments: BigInt!
  totalApiCalls: BigInt!
  totalValueLocked: BigInt! # current TVL in the contract
  averagePaymentSize: BigDecimal!
  lastUpdatedTimestamp: BigInt!
}

type ZkVerifierUpdate @entity {
  id: Bytes! # transaction hash + log index
  oldVerifier: Bytes!
  newVerifier: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}