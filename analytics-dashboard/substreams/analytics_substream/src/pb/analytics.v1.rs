// @generated
// This file is @generated by prost-build.
/// Real-time analytics summary
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaymentAnalytics {
    #[prost(string, tag="1")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub unique_users: u32,
    #[prost(uint32, tag="3")]
    pub unique_providers: u32,
    #[prost(string, tag="4")]
    pub avg_payment_size: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub payment_frequency: u32,
    #[prost(uint64, tag="6")]
    pub block_number: u64,
    #[prost(message, optional, tag="7")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// User behavior metrics for AI insights
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserMetrics {
    #[prost(bytes="vec", tag="1")]
    pub user_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="2")]
    pub total_deposits: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub total_withdrawals: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub total_payments: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub payment_count: u32,
    #[prost(string, tag="6")]
    pub avg_payment_size: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub last_activity_block: u64,
    #[prost(bytes="vec", repeated, tag="8")]
    pub providers_used: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(double, tag="9")]
    pub payment_pattern_score: f64,
    /// "low", "medium", "high"
    #[prost(string, tag="10")]
    pub risk_category: ::prost::alloc::string::String,
    /// AI-generated insights
    #[prost(string, repeated, tag="11")]
    pub ai_insights: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Provider performance analytics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProviderMetrics {
    #[prost(bytes="vec", tag="1")]
    pub provider_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="2")]
    pub total_earnings: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub total_withdrawals: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub unique_users: u32,
    #[prost(uint64, tag="5")]
    pub total_api_calls: u64,
    #[prost(string, tag="6")]
    pub avg_call_value: ::prost::alloc::string::String,
    #[prost(double, tag="7")]
    pub reliability_score: f64,
    #[prost(double, tag="8")]
    pub growth_rate: f64,
    /// "bronze", "silver", "gold", "platinum"
    #[prost(string, tag="9")]
    pub performance_tier: ::prost::alloc::string::String,
}
/// Real-time anomaly detection
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnomalyAlert {
    /// "large_payment", "frequent_activity", "new_pattern"
    #[prost(string, tag="1")]
    pub anomaly_type: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="3")]
    pub user_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="4")]
    pub provider_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="5")]
    pub transaction_hash: ::prost::alloc::string::String,
    /// 0.0 - 1.0
    #[prost(double, tag="6")]
    pub severity_score: f64,
    #[prost(message, optional, tag="7")]
    pub detected_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="8")]
    pub block_number: u64,
}
/// AI-powered predictive insights
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictiveInsights {
    #[prost(bytes="vec", tag="1")]
    pub user_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="2")]
    pub predicted_next_deposit_amount: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub predicted_next_deposit_block: u64,
    #[prost(double, tag="4")]
    pub churn_probability: f64,
    #[prost(string, repeated, tag="5")]
    pub optimization_suggestions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(double, tag="6")]
    pub cost_savings_potential: f64,
}
/// Network effect analysis
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetworkMetrics {
    #[prost(uint32, tag="1")]
    pub total_unique_users: u32,
    #[prost(uint32, tag="2")]
    pub total_unique_providers: u32,
    #[prost(uint32, tag="3")]
    pub active_user_provider_pairs: u32,
    /// connections / possible_connections
    #[prost(double, tag="4")]
    pub network_density: f64,
    #[prost(message, repeated, tag="5")]
    pub top_connections: ::prost::alloc::vec::Vec<UserProviderEdge>,
    #[prost(string, tag="6")]
    pub total_network_volume: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserProviderEdge {
    #[prost(bytes="vec", tag="1")]
    pub user_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub provider_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="3")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub transaction_count: u32,
    #[prost(double, tag="5")]
    pub relationship_strength: f64,
}
/// Token API enriched data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenEnrichedMetrics {
    #[prost(bytes="vec", tag="1")]
    pub token_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub decimals: u32,
    #[prost(string, tag="5")]
    pub current_price_usd: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub market_cap: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub holder_count: u64,
    #[prost(string, tag="8")]
    pub volume_24h: ::prost::alloc::string::String,
    #[prost(double, tag="9")]
    pub price_change_24h: f64,
}
/// Multi-chain analytics
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CrossChainMetrics {
    #[prost(string, tag="1")]
    pub chain_name: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub chain_id: u32,
    #[prost(string, tag="3")]
    pub total_volume: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub user_count: u32,
    #[prost(uint32, tag="5")]
    pub provider_count: u32,
    #[prost(string, tag="6")]
    pub avg_gas_cost: ::prost::alloc::string::String,
    /// volume per gas cost
    #[prost(double, tag="7")]
    pub efficiency_score: f64,
}
/// Aggregated analytics response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsBundle {
    #[prost(message, optional, tag="1")]
    pub payment_analytics: ::core::option::Option<PaymentAnalytics>,
    #[prost(message, repeated, tag="2")]
    pub user_metrics: ::prost::alloc::vec::Vec<UserMetrics>,
    #[prost(message, repeated, tag="3")]
    pub provider_metrics: ::prost::alloc::vec::Vec<ProviderMetrics>,
    #[prost(message, repeated, tag="4")]
    pub anomaly_alerts: ::prost::alloc::vec::Vec<AnomalyAlert>,
    #[prost(message, repeated, tag="5")]
    pub predictive_insights: ::prost::alloc::vec::Vec<PredictiveInsights>,
    #[prost(message, optional, tag="6")]
    pub network_metrics: ::core::option::Option<NetworkMetrics>,
    #[prost(message, repeated, tag="7")]
    pub token_metrics: ::prost::alloc::vec::Vec<TokenEnrichedMetrics>,
    #[prost(message, repeated, tag="8")]
    pub cross_chain_metrics: ::prost::alloc::vec::Vec<CrossChainMetrics>,
}
// @@protoc_insertion_point(module)
